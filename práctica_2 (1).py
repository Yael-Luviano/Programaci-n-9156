# -*- coding: utf-8 -*-
"""Práctica 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WZJyk10Wv18G7_Yw_J_aBuRtmHIx4y9o
"""

#Alumnos: Luviano Real José Yael 321013725 y Romero Vázquez Angel Eladio 424037941
import numpy as np

class Persona:
    def __init__(self, tiempo_arribo, es_urgente, tiempo_atencion):
        self.tiempo_arribo = tiempo_arribo
        self.es_urgente = es_urgente
        self.tiempo_atencion = tiempo_atencion

class Cola:
    def __init__(self):
        self.personas_urgentes = []
        self.personas_rutinarias = []

    def agregar_persona(self, persona):
        if persona.es_urgente:
            self.personas_urgentes.append(persona)
        else:
            self.personas_rutinarias.append(persona)

    def proxima_persona(self):
        if self.personas_urgentes:
            return self.personas_urgentes.pop(0)
        elif self.personas_rutinarias:
            return self.personas_rutinarias.pop(0)
        return None

class Simulacion:
    def __init__(self, num_personas, tiempo_atencion):
        self.reloj = 0.0
        self.cola = Cola()
        self.tiempos_espera = {'urgente': [], 'rutinario': []}
        self.tiempos_sistema = {'urgente': [], 'rutinario': []}
        self.num_personas = num_personas
        self.tiempo_atencion = tiempo_atencion
        self.tiempo_proxima_disponible = 0.0

    def simular(self):
        for _ in range(self.num_personas):
            tiempo_interarribo = np.random.uniform(0.5, 50)
            self.reloj += tiempo_interarribo
            es_urgente = np.random.rand() < 0.2

            persona = Persona(self.reloj, es_urgente, self.tiempo_atencion)
            self.cola.agregar_persona(persona)

            if self.reloj >= self.tiempo_proxima_disponible:
                persona_atendida = self.cola.proxima_persona()
                if persona_atendida:
                    tiempo_espera = max(self.reloj - persona_atendida.tiempo_arribo, 0)
                    tipo = 'urgente' if persona_atendida.es_urgente else 'rutinario'
                    self.tiempos_espera[tipo].append(tiempo_espera)
                    tiempo_en_sistema = tiempo_espera + self.tiempo_atencion
                    self.tiempos_sistema[tipo].append(tiempo_en_sistema)
                    self.tiempo_proxima_disponible = self.reloj + persona_atendida.tiempo_atencion

        estadisticas = {}
        for tipo in ['urgente', 'rutinario']:
            estadisticas[f'tiempo_promedio_espera_{tipo}'] = np.mean(self.tiempos_espera[tipo]) if self.tiempos_espera[tipo] else 0
            estadisticas[f'tiempo_promedio_sistema_{tipo}'] = np.mean(self.tiempos_sistema[tipo]) if self.tiempos_sistema[tipo] else 0
        return estadisticas

# Parámetros de la simulación
NUM_PERSONAS = 50000
TIEMPO_ATENCION = 20  # Asumiendo que queremos usar el tiempo reducido de atención

# Crear y ejecutar la simulación
simulacion = Simulacion(NUM_PERSONAS, TIEMPO_ATENCION)
estadisticas = simulacion.simular()

# Imprimir los resultados
for key, value in estadisticas.items():
    print(f"{key}: {value:.2f} minutos")