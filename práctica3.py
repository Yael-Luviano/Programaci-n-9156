# -*- coding: utf-8 -*-
"""Práctica3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JvEiApQyRGmKX341K1McKjYKx1IVKQGA
"""

#Practica 3
#Equipo: Luviano Real Jose Yael 321013725    Romero Vázquez Angel Eladio 424037941
import pandas as pd

class TrieNode:
    """Un nodo en el trie que representa un único bit de una cadena binaria."""
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False
        self.character = None

class Trie:
    """Estructura de datos Trie que soporta la inserción de pares caracter-código y la codificación/decodificación de strings."""
    def __init__(self):
        self.root = TrieNode()
        self.char_to_code = {}
        self.code_to_char = {}

    def insert(self, char, binary_code):
        """Inserta un caracter con su código binario correspondiente en el trie.

        Args:
            char (str): El caracter a insertar.
            binary_code (str): La cadena binaria que representa el caracter.
        """
        node = self.root
        for bit in binary_code:
            if bit not in node.children:
                node.children[bit] = TrieNode()
            node = node.children[bit]
        node.is_end_of_word = True
        node.character = char
        self.char_to_code[char] = binary_code
        self.code_to_char[binary_code] = char

    def codificacion(self, string):
        """Codifica una cadena de texto utilizando el trie.

        Args:
            string (str): La cadena de texto a codificar.

        Returns:
            str: La cadena binaria codificada.
        """
        binary_string = ''
        for char in string:
            binary_string += self.char_to_code.get(char, '')
        return binary_string

    def decodificacion(self, binary_string):
        """Decodifica una cadena binaria a texto utilizando el trie.

        Args:
            binary_string (str): La cadena binaria a decodificar.

        Returns:
            str: La cadena de texto decodificada.
        """
        decoded_string = ''
        node = self.root
        for bit in binary_string:
            if bit in node.children:
                node = node.children[bit]
                if node.is_end_of_word:
                    decoded_string += node.character
                    node = self.root
            else:
                # Esto maneja el caso donde se encuentran bits que no llevan a un caracter directamente,
                # reiniciando la búsqueda desde la raíz si el bit actual no continúa una secuencia válida.
                node = self.root
        return decoded_string

def build_trie_from_excel(file_path):
    """Construye un trie a partir de un archivo Excel que contiene las columnas 'Letra' y 'Cadena'.

    Args:
        file_path (str): Ruta al archivo Excel.

    Returns:
        Trie: El trie construido con los datos del archivo.
    """
    df = pd.read_excel(file_path)
    trie = Trie()
    for index, row in df.iterrows():
        trie.insert(str(row['Letra']), str(row['Cadena']))
    return trie

def main():
    """Función principal que ejecuta los procesos de construcción del trie, codificación y decodificación."""
    try:
        # Ruta al archivo Excel
        excel_path = 'path_to_your_excel_file.xlsx'  # Ajusta la ruta al archivo
        trie = build_trie_from_excel(excel_path)

        # Cadena a codificar y decodificar
        test_string = 'ABRACADABRA'
        encoded_string = trie.codificacion(test_string)
        decoded_string = trie.decodificacion(encoded_string)

        # Mostrar resultados
        print(f'Cadena original: {test_string}')
        print(f'Cadena codificada: {encoded_string}')
        print(f'Cadena decodificada: {decoded_string}')
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == '__main__':
    main()